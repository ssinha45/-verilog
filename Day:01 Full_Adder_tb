module full_adder_tb;

	// Inputs
	reg A;
	reg B;
	reg C;

	// Outputs
	wire S;
	wire Cout;

	// Instantiate the Unit Under Test (UUT)
	full_adder uut (
		.A(A), 
		.B(B), 
		.C(C), 
		.S(S), 
		.Cout(Cout)
	);

	initial begin
	$display("A|B|C|S|Cout");
	$display("................");
	
	A=0; B=0; C=0; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	
	A=0; B=0; C=1; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	
	A=0; B=1; C=0; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	
	A=0; B=1; C=1; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	
	A=1; B=0; C=0; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	
	A=1; B=0; C=1; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	
	A=1; B=1; C=0; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	
	A=1; B=1; C=1; #5;
	$display("%b | %b | %b | %b | %b",A, B, C, S, Cout);
	$finish;
	
	end
      
endmodule

